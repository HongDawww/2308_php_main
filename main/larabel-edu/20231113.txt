- 명령어로 controller 생성
php artisan make:controller (이름)

php artisan make:controller ttt

li < 명령어 리스트 
pwd < 현재 경로

{task} 세그먼트 파라미터

- @yeild : 자식 section 이 없을 경우 두번째 파라미터 사용
: 상속 - @extends()
: section 부모 템플릿에 해당하는 yield

- 다른 템플릿 포함 : @include();

- 코드가 많을 경우 : @section ~ @endsection

- 해당 section이 없을 경우 : @section ~ @show 

- 조건문 (if) :
@if($gender === '0')
    <span>남자</span>
@elseif($gender === '1')
    <span>여자</span>
@else
    <span>기타</span>
@endif

- 반복문 (for) : 화면에 변수 출력 {{$i}}
@for($i = 0; $i < 5; $i++)
    <span>{{$i}}</span>
@endfor

9단 
@for ($j=1; $j < 10; $j++)
    {{$z = 9}}
<span> x {{$j}} = {{$j * $z}}</span>
 @endfor

구구단
@for($i = 1; $i <= 9; $i++)
    <span>{{$i.'단'}}</span>
    <br>
    @for($j = 1; $j < 10; $j++)
        <span>{{$i.' x '.$j.' = '.($i * $j)}}</span>
        <br>
    @endfor
@endfor

- foreach 문 :
<h3>foreach문</h3>
@foreach($data as $key => $val)
    <span>{{$key.' : '.$val}}</span>
    <br>
@endforeach

- forelse 문 : 빈 배열의  경우
<h3>forelse</h3>
@forelse($data2 as $key => $val)
    <span>{{$key.' : '.$val}}</span>
    <br>
@empty
    <span>빈 배열입니다</span>
@endforelse

- 카운트 {{$loop->count}}
- 현재 인덱스 번호 {{$loop->count.' >> '.$loop->iteration}}

- 템플릿 추가 변수 셋팅
:  @include('inc.footer',['key1' => 'key1 부모에서 셋팅'])
: footer : {{$key1}}


< 초기 구축> 
1. factories : 대량 더미 데이터 생성 / 테스트
2. migration : db관리 / DDL
3. seeders : 기본 데이터 / 버전관리
4. model : db연결 , orm 

<model table생성> : 터미널에서 입력 
** 테이블명 복수형으로 자동 인식됨
php artisan make:model (이름) -mfs
-mfs : migration factory seeder를 한 번에 생성

-- seeder 생성
php artisan make:seeder BoardSeeder 


글 번호 제목 내용 작성일 수정일 삭제일자
no , title , content create_at updated_at delete_at
** 기본 pk : id로 설정됨 ( auto_increment , big_int)
** varchar = string
** null 허용 : ->nullable();
** index 생성 : ->index
1. $table->timestamps(); : create_at updated_at 생성 , null 허용
2.  $table->timestamp('created_at')->default('CURRENT_TIMESTAMP');  : not null
 $table->softDeletes(); : delete_at , nullable

migrate 생성 : php artisan migrate
롤백 : php artisan migrate:rollback
리셋 : php artisan migrate:reset
php artisan migrate:refresh
php artisan migrate:fresh

-- 컬럼 추가 
php artisan make:migration alter_boards_table

        Schema::table('boards', function (Blueprint $table) {
            $table->char('categories_no',1);
        });
>> php artisan migrate
------------------------------------------------
테이블명 : categories 

1. 모델 생성 : php artisan make:model Category -mfs

컬럼 : id, no, name, deleted_at


2. 테이블 생성 : 
$table->id();
$table->char('no',1)->unique();
$table->string('name', 20)->unique();
$table->softDeletes();





--- category seeder : insert 내용
1. use Illuminate\support\Facades\DB;

2.      DB::table('categories')->insert([
            ['no' => '0','name' => '카테고리0']
            ,['no' => '1','name' => '카테고리1']
            ,['no' => '2','name' => '카테고리2']
            ,['no' => '3','name' => '카테고리3']
            ,['no' => '4','name' => '카테고리4']
            ,['no' => '5','name' => '카테고리5']
            ,['no' => '6','name' => '카테고리6']
            ,['no' => '7','name' => '카테고리7']
            ,['no' => '8','name' => '카테고리8']
            ,['no' => '9','name' => '카테고리9']
        ]);

3. insert ( 기본 데이터 생성)
php artisan db:seed --class=CategorySeeder

1. 팩토리 생성 ( 카테고리 번호 ,제목 ,내용, 작성일, 수정일 ,삭제일자 )
php artisan make:factory ( 팩토리명 ) --model (모델명)

1.------------boardFactory----------------
public function definition()
    {
        $date = $this->faker->dateTimeBetween('-1 years');
        return [
           'categories_no' => $this->faker->randomNumber(1)
           ,'title' => $this->faker->realText(50)
           ,'content' => $this->faker->realText(1000)
           ,'created_at' => $date
           ,'updated_at' => $date
        ];
    }

2. -----------------------DatabaseSeeder-----------------
(더미 데이터 삽입용 팩토리 호출)

   public function run()
    {
        $cnt = 0;
        while ($cnt < 60) {
            \App\Models\Board::factory(10)->create();
            $cnt++;
        }
    }

3. -------------------- 실행 (db 생성)

php artisan db:seed --class=DatabaseSeeder


* 한글 데이터로 변경
config -> app.php -> 
 'faker_locale' => 'ko_KR',

php artisan db:seed --class=DatabaseSeeder

-----------------------------------------------------------
현재 시간
'timezone' => 'Asia/Seoul',

php artisan make:model (모델명)-mfs

ORM
$data = ['id' => 1]; --insert

Models
1. 테이블 정의
protected $table = '테이블명';
2. pk 정의 (기본값 : id)
 protected $primaryKey = 'id';
** 대량 할당 취약성 대책
 - 화이트 리스트 방식 : 수정 O protected $fillable = ['컬럼1', '컬럼2'];
 - 블랙 리스트 방식 : 수정 X protected $guarded = ['컬럼1', '컬럼2'];

** default 값 셋팅
 public $timestamps = true;

????    
 protected $attributes = [
        'created_at' => \now
        ,'updated_at' => \now
    ];
??????????????????

board controller 생성
 - php artisan make:controller BoardController

 - use Illuminate\Support\Facades\DB;
0. 라우터 생성
use App\Http\Controller\BoardController;
Route::get('/boards', [BoardController::class, 'index']) ->name('board.index');
1. 메소드 생성

class Board extends Model
{
    use HasFactory;
    protected $table = 'boards';
    protected $primaryKey = 'id';

    public $timestamps = true;

}
2. 쿼리빌더
(1)
class BoardController extends Controller
{
   public function index() {

    $result = DB::select('select * from boards limit 10');

    return var_dump($result);
   }
}
(2) $result = DB::select('select * from boards limit :no', ['no' => 1]);
(3) $result = DB::select('select * from boards limit ?', [2]);
(4) $result = DB::select('select * from boards limit ? offset ?', [2, 10]);

** select 
- 카테고리가 4, 7, 8 게시글의 수 출력
    $arr = [4,7,8];
    $result = DB::select(
         'select count(id)
            from boards 
            where categories_no = ? 
            or categories_no = ? 
            or categories_no = ?'
        , $arr);

- 카테고리별 게시글 갯수 출력
 $result = DB::select('select count(categories_no) as cnt from boards group by categories_no');


- 카테고리명 도 출력
    $result = DB::select(
        'SELECT 
            ca.no
            ,ca.name
            ,COUNT(ca.no) AS cnt
        FROM boards bo
               JOIN  categories ca
                ON bo.categories_no = ca.no
        GROUP BY ca.no, ca.name'
        );


'select ca.no, ca.name, count(ca.no) as cnt from boards bo join categories ca on bo.categories_no = ca.no group by ca.no, ca.name'

** insert
    $sql = 
            'insert into boards(title, content, created_at, updated_at, categories_no) values (?,?,?,?,?)';
    $arr = [
                '제목1'
                ,'내용1'
                ,now()
                ,now()
                ,'0'
    ];
    DB::begintransaction();
    DB::insert($sql, $arr);
    DB::commit();
   
    $result = DB::select('select * from boards order by id desc limit 1');

** update
    $result = DB::select('select * from boards order by id desc limit 1');
    DB::begintransaction();
    DB::update('update boards set title = ?, content = ? where id = ?',['업데이트1','업데이트',$result[0]->id]);
    DB::commit();


** delete
    DB::beginTransaction();
    DB::delete('delete from boards where id = ?' ,[$result[0]->id]);
    DB::commit();

쿼리 빌더 체이닝

(1)
$result = DB::table('boards')->where('id','=',300)->get();

(2)
    $result = 
        DB::table('boards')
        ->where('id','=',300)
        ->orWhere('id','=',400)
        ->get();
 (3)     
        $result = 
        DB::table('boards')
        ->where('id','=',300)
        ->orWhere('id','=',400)
        ->orderBy('id','desc')
        ->get();
(4)
        $result = 
        DB::table('categories')
        ->whereIn('no',[1,2,3])
        ->get();

(5)
        $result = 
        DB::table('categories')
        ->whereNotIn('no',[1,2,3])
        ->get();
** first()
- 최상위 limit 1
$result = DB::table('boards')->first();

- desc
$result = DB::table('boards')->orderBy('id','desc')->first();

** count() : 레코드 수 반환
$result = DB::table('boards')->count();

**max()
$result = DB::table('boards')->max('id');


- 타이틀, 내용,  카테고리명 100개
        $result =  DB::table('boards')
                    ->select('boards.title','boards.content','categories.name')
                    ->join('categories','categories.no','boards.categories_no')
                    ->limit(100)
                    ->get();

- 카테고리별 게시글 갯수, 카테고리명 출력 
        $result = 
            DB::table('boards')
            ->select('categories.no','categories.name', DB::raw('count(categories.no)'))
            ->join('categories','categories.no','boards.categories_no')
            ->groupBy('categories.no','categories.name')
            ->get();


< 새 프로젝트 >
composer create-project laravel/laravel="9" laravel_board 

** DB table 생성 - model , migration / factory seeder - x
1. user - migration
2. board - model , migration

** migration 생성 ( user )
> php artisan make:migration create_user_table

- (user)migration
 public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('email')->unique();
            $table->string('password',512);
            $table->string('name',50);
            $table->timestamp('email_verified_at')->nullable();
            $table->rememberToken();
            $table->timestamps();
            $table->softDeletes();
        });
    }

** model , migration 생성( board) 
> php artisan make:model Board -m

- (board)migration
 public function up()
    {
        Schema::create('boards', function (Blueprint $table) {
            $table->id('b_id');
            $table->string('b_title',30);
            $table->string('b_content',2000);
            $table->integer('b_hits')->default(0);
            $table->timestamps();
            $table->softDeletes();
        });
    }

- .env -> db_database name, password 설정

- config -> app.php -> timazone => Asia/Seou로 변경

>  php artisan migrate <생성>
user controller 생성
> php artisan make:controller UserController--resource
> use App\Http\Controllers\UserController;
> php artisan route:list

- 로그인 화면 이동 
Route::get('/user/login',[UserController::class,'logingo'])->name('user.logingo');
- 로그인 처리
Route::post('/user/login',[UserController::class,'loginpost'])->name('user.loginpost');
- 회원가입 화면 이동
Route::get('/user/registe',[UserController::class,'registget'])->name('user.registget');
- 회원 가입 처리
Route::post('/user/registe',[UserController::class,'registepost'])->name('user.registepost');

<폴더 / 파일 생성>
resources/ layout / header.blade.php
		footer.blade.php
		layout.blade.php 
- <title>@yield('title','Laravel Board')</title>
-    	@include('layout.header')
-	 @yield('main')
-	 @include('layout.footer')

> login.blade.php
@extends('layout.layout')
@section('title','login')
@section('main')
    <main>
        <h1>Login</h1>
    </main>
@endsection
> php artisan serve

- registration.blade.php




















